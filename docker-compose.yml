services:
  app:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: nest_app
    restart: always
    entrypoint: 'npm run start:debug'
    env_file: ./.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - '${API_PORT}:${API_PORT}'
      - '9229:9229'
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DATABASE: $POSTGRES_DATABASE
    networks:
      - nest_app_network

  postgres:
    image: postgres
    container_name: nest_app_postgres
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DATABASE
    ports:
      - '5433:$POSTGRES_PORT'
    networks:
      - nest_app_network
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $POSTGRES_USER -h localhost -p $POSTGRES_PORT']
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_migrations:
    container_name: nest_app_postgres_migrations
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: npm run migrations:run
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DATABASE: $POSTGRES_DATABASE
    networks:
      - nest_app_network

networks:
  nest_app_network:
    driver: bridge
